INTRO
	Continuous Integration is a software development practice in which developers are required to frequently commit changes to the source code in a shared repository. Each commit is then continuously pulled & built. 
	Jenkins is an open source, Continuous Integration (CI) tool. It continuously pulls, builds and tests any code commits made by a developer with the help of plugins.
	Slave/Agent - It is typically a machine, or container, which connects to a Jenkins master and executes tasks when directed by the master.
	Executor - A slot for execution of work defined by Project/Job. A Node may have zero or more Executors configured which corresponds to how many concurrent Projects or Pipelines are able to execute on that Node.
	Label - User-defined text for grouping Agents, typically by similar functionality or capability. For example linux for Linux-based agents or docker for Docker-capable agents.
	Workspace/directory - It is specific to a Job. It is where work can be done on files checked out from source control. Jenkins uses the name of the Pipeline to create directories on disk. Pipeline names which include spaces may uncover bugs in scripts which do not expect paths to contain spaces.
	Schedule a build periodically - 
		Syntax: (Minute Hour DayOfMonth(1-31) Month(1-12) DayOfWeek(0-7, where 0 and 7 are Sunday))
		Example: H/2 * * * * (schedule your build for every 2 minutes)
	Build
		<build.url>/stop - aborts a Pipeline.
		<build.url>/term - forcibly terminates a build (should only be used if stop does not work.
		<build.url>/kill - hard kill a pipeline. This is the most destructive way to stop a pipeline and should only be used as a last resort.
	Server
		Using BASH - $ sudo service jenkins restart/stop/start
		<jenkins.server.url>/restart
		<jenkins.server.url>/safeRestart - Puts Jenkins into the quiet mode, wait for existing builds to be completed, and then restart Jenkins
		<jenkins.server.url>/exit
		<jenkins.server.url>/safeExit - Puts Jenkins into the quiet mode, wait for existing builds to be completed, and then shut down Jenkins
		<jenkins.server.url>/quietDown - Puts Jenkins in a Quiet mode, in preparation for a restart. In that mode Jenkins don’t start any build
		<jenkins.server.url>/cancelQuietDown - Cancel the effect of the “quiet-down” command
INSTALLATION (on ubuntu)
	Step 1: Install Java
		$ sudo apt update
		$ sudo apt install openjdk-8-jdk
	Step 2: Download Jenkins Repository and add it to the system
		$ wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add –
		$ sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
	Step 3: Install Jenkins
		$ sudo apt update
		$ sudo apt install Jenkins
	Step 4: Once Jenkins is up and running, access it from the link:
		http://localhost:8080
	If your /etc/init.d/jenkins file fails to start Jenkins, edit the $JENKINS_HOME/config.xml to replace the line ----HTTP_PORT=8080---- with ----HTTP_PORT=8081---- Here, "8081" was chosen but you can put another port available.
	Post-installation setup wizard
		Unlocking Jenkins
		Creating the first administrator user
		
MANAGE JENKINS - Jenkins Dashboard -> Manage Jenkins
	Configure System -
		Can be used to manage paths to various tools to use in builds.
		Jenkins dynamically adds the config fields after the plugins are installed.
	Manage Plugins - Plugins can be removed, updated and installed through manage plugin screen.
	System Info -
		List all the current java properties and system environment variables.
		System log - view Jenkins log in real time.
		Script console - lets you run groovy scripts on the server.
		Manage nodes - configure the number of builds you want.
		Shutdown - click prepare to shutdown link to prevent any new builds from being started. After all current builds are finished, Jenkins will shut down cleanly.
	Configure Global Security -
		Ability to have secure config for different users.
		Add the users and go-to ‘manage users’ option to provide permissions
		To set authorizations, and click on matrix-based security
		
PLUGINS - Jenkins Dashboard -> Manage Jenkins -> Manage Plugins
	To uninstall plugins, go-to manage plugins and click on the installed tab and click on uninstall for the plugin. Ensure to restart Jenkins for changes to take effect
	In Case of need to install an older version of the plugin, download from the site and click on Upload option to do it manually.

BUILD PIPELINE
	Build pipeline can be used to chain several jobs together and run them in a sequence
	Before using it, you have to add this plugin
	Example - 
		Step 1: Create 3 freestyle Jobs (Job1, Job2, Job3)
		Step 2: Chain the 3 Jobs together
			Job1 -> configure -> Post Build -> Build other projects -> Job2
			Job2 -> configure -> Post Build -> Build other projects -> Job3
		Step 3: Create a build pipeline view
			Jenkins Dashboard -> Add view -> Enter a name -> Build pipeline view -> ok -> configure -> Pipeline flow -> Select Initial job -> Job1 -> ok
		Step 4: Run the Build Pipeline

DIFFERENT TYPES OF JENKINS JOBS
	Freestyle - Freestyle build jobs are general-purpose build jobs, which provides maximum flexibility. It can be used for any type of project.
	Pipeline - This project runs the entire software development workflow as code. You can code the entire workflow and put it in a Jenkinsfile
	Multiconfiguration - The multiconfiguration project allows you to run the same build job on different environments. It is used for testing an application in different environments.
	
JENKINSFILE	- can only be used when creating pipeline-type job
	The first line of a Jenkinsfile should be #!/usr/bin/env groovy
	It can be written based on two syntaxes -
		Scripted pipeline - Code is written on the Jenkins UI instance and is enclosed within the node block (simple and easy)
			node {
				stage('Build') {
					echo 'Building....'
				}
				stage('Test') {
					echo 'Testing....'
				}
				stage('Deploy') {
					echo 'Deploying....'
				}
			}
		Declarative pipeline - Code is written in 'Jenkinsfile' file which can be checked into a project’s source control repository
			pipeline {
				agent any  // The agent directive, which is required, instructs Jenkins to allocate an executor and workspace for the Pipeline.
				stages {
					stage('Build') {
						steps {
							echo 'Building..'
						}
					}
					stage('Test') {
						steps {
							echo 'Testing..'
						}
					}
					stage('Deploy') {
						steps {
							echo 'Deploying....'
						}
					}
				}
			}
	Pipeline - A user defined block which contains all the stages. It is a key part of declarative pipeline syntax.
	Node - A node is a machine that executes an entire workflow. It is a key part of the scripted pipeline syntax.
	Agent - It indicates that Jenkins should allocate an executor and workspace/directory for this part of the Pipeline.
	Stages - It contains all the work; each stage performs a specific task.
	Steps - steps are carried out in sequence to execute a stage
	example -
		node {
			stage(‘SCM checkout’) {
				//Checkout from your SCM(Source Control Management)
				//For eg: Git Checkout
			}
			stage(‘Build’) {
				//Compile code
				//Install dependencies
				//Perform Unit Test, Integration Test
			}
			stage(‘Test’) {
				//Resolve test server dependencies
				//Perform UAT
			}
			stage(‘Deploy’) {
				//Deploy code to prod server
				//Solve dependency issues
			}
		}
	Snippet Generator - localhost:8080/pipeline-syntax
	Global Variable Reference - localhost:8080/pipeline-syntax/globals
		Like the Snippet Generator, it is also dynamically populated by plugins. 
		Unlike the Snippet Generator however, the Global Variable Reference only contains documentation for variables provided by Pipeline or plugins, which are available for Pipelines
	Code snippet
		checkout scm - The checkout step will checkout code from source control; scm is a special variable which instructs the checkout step to clone the specific revision which triggered this Pipeline run
		git url: 'git://example.com/amazing-project.git', branch: 'master' - consider this as a function where 'git' is the function name and 'url' and 'branch' are the named-parameters
		The sh step assumes the system is Unix/Linux-based, for Windows-based systems the bat could be used instead.
		`make check` returns non-zero on test failures
		Pipeline will only continue if a zero exit code is returned by the 'sh' command. Any non-zero exit code will fail the Pipeline. Inline shell conditional (sh 'make || true') ensures that the sh step always sees a zero exit code.
		The "Deploy" stage will only execute assuming previous stages completed successfully, otherwise the Pipeline would have exited early. Accessing the currentBuild.result variable allows the Pipeline to determine if there were any test failures. In which case, the value would be UNSTABLE.
			stage('Deploy') {  // Script Pipeline
				if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {
					sh 'make publish'
				}
			}
				
ADVANCED SYNTAX FOR PIPELINE
	String Interpolation -
		def username = 'Jenkins'
		echo 'Hello Mr. ${username}'  #=> Hello Mr. ${username}
		echo "I said, Hello Mr. ${username}"  #=> I said, Hello Mr. Jenkins
	Working with the Environment - 
		Jenkins Pipeline exposes environment variables via the global variable env, which is available from anywhere within a Jenkinsfile. ex- env.BUILD_ID, env.JOB_NAME, env.JENKINS_URL
		Setting an environment variable within a Jenkins Pipeline for Script Pipeline (must use the withEnv step) -
			withEnv(["PATH=${tool 'M3'}/bin"]) {
				sh 'mvn -B verify'
			}
	Parameters - Configuring parameters with Scripted Pipeline is done with the properties step, which can be found in the Snippet Generator
		properties([parameters([string(defaultValue: 'Hello', description: 'How should I greet the world?', name: 'Greeting')])])
		....
		echo "${params.Greeting} World!"
	Handling Failures - Scripted Pipeline however relies on Groovy’s built-in try/catch/finally semantics for handling failures during execution of the Pipeline.
		stage('Test') {
			try {
				sh 'make check'
			}
			finally {
				junit '**/target/*.xml'
			}
		}
		In the [test] example above, the sh step was modified to never return a non-zero exit code (sh 'make check || true'). This approach, while valid, means the following stages need to check currentBuild.result to know if there has been a test failure or not. An alternative way of handling this, which preserves the early-exit behavior of failures in Pipeline, while still giving junit the chance to capture test reports, is to use a series of try /finally blocks
	Using multiple agents
		stage('Build') {
			node {
				checkout scm
				sh 'make'
				stash includes: '**/target/*.jar', name: 'app'   // The stash step allows capturing files matching an inclusion pattern (*/target/.jar) for reuse within the same Pipeline. Once the Pipeline has completed its execution, stashed files are deleted from the Jenkins master.
			}
		}
		stage('Test') {
			node('linux') {  // linux is a label
				checkout scm
				try {
					unstash 'app'  // unstash will retrieve the named "stash" from the Jenkins master into the Pipeline’s current workspace
					sh 'make check'
				}
				finally {
					junit '**/target/*.xml'
				}
			}
			node('windows') {
				checkout scm
				try {
					unstash 'app'
					bat 'make check'  // The bat script allows for executing batch scripts on Windows-based platforms
				}
				finally {
					junit '**/target/*.xml'
				}
			}
		}
		
USING DOCKER WITH PIPELINE
	Practically any tool, which can be packaged in a Docker container, can be used with ease by making only minor edits to a Jenkinsfile
		node {
			/* Requires the Docker Pipeline plugin to be installed */
			docker.image('node:7-alpine').inside {
				stage('Test') {
					sh 'node --version'
				}
			}
		}
	Users can specify custom Docker Volumes to mount, which can be used for caching data on the agent between Pipeline runs. This will avoid the need to re-download dependencies for subsequent runs of the Pipeline.
		docker.image('maven:3-alpine').inside('-v $HOME/.m2:/root/.m2')
	Using multiple containers
		node {
			/* Requires the Docker Pipeline plugin to be installed */
			stage('Back-end') {
				docker.image('maven:3-alpine').inside {
					sh 'mvn --version'
				}
			}
			stage('Front-end') {
				docker.image('node:7-alpine').inside {
					sh 'node --version'
				}
			}
		}
	Specifying a Docker Label
		By default, Pipeline assumes that any configured agent is capable of running Docker-based Pipelines. 
		Pipeline provides a global option in the Manage Jenkins page, and on the Folder level, for specifying which agents (by Label) to use for running Docker-based Pipelines.
		
PIPELINE DEVELOPMENT TOOLS
	Snippet Generator
	Blue Ocean Pipeline Editor - The editor offers a structural view of all the stages, parallel branches, and steps in a Pipeline. The editor validates Pipeline changes as they are made, eliminating many errors before they are even committed. Behind the scenes it still generates Declarative Pipeline code.
	Command-line Pipeline Linter - Jenkins can validate, or "lint", a Declarative Pipeline from the command line before actually running it. Linting can be done via the CLI with SSH(recommended) or  HTTP POST using curl
		# ssh (Jenkins CLI)
		# JENKINS_SSHD_PORT=[sshd port on master]
		# JENKINS_HOSTNAME=[Jenkins master hostname]
		ssh -p $JENKINS_SSHD_PORT $JENKINS_HOSTNAME declarative-linter < Jenkinsfile
		
"REPLAY" PIPELINE RUNS WITH MODIFICATIONS -  allows for quick modifications and execution of an existing Pipeline without changing the Pipeline configuration or creating a new commit.
	Step -
		Step 1. Select a previously completed run in the build history.	
		Step 2. Click "Replay" in the left menu
		Step 3. Make modifications to the script and click "Run"
	Once you are satisfied with the changes, you can use Replay to view them again, copy them back to your Pipeline job or Jenkinsfile, and then commit them using your usual engineering processes.

JENKINS CLI
	The command line interface can be accessed over SSH or with the Jenkins CLI client, a .jar file distributed with Jenkins.
	In a new Jenkins installation, the SSH service is disabled by default. Administrators may choose to set a specific port or ask Jenkins to pick a random port in the Configure Global Security page
	In order to add an SSH public key for the appropriate user, navigate to JENKINS_URL/user/USERNAME/configure and paste an SSH public key into the appropriate text area.
	ssh -l <USERNAME> -p <PORT> localhost help - Jenkins has a number of built-in CLI commands which can be found in every Jenkins environment, such as build or list-jobs. Plugins may also provide CLI commands; in order to determine the full list of commands available in a given Jenkins environment, execute the CLI help command
	ssh -l <USERNAME> -p <PORT> localhost help build - One of the most common and useful CLI commands is build, which allows the user to trigger any job or Pipeline for which they have permission.
	ssh -l <USERNAME> -p <PORT> localhost help console - Similarly useful is the console command, which retrieves the console output for the specified build or Pipeline run. When no build number is provided, the console command will output the last completed build’s console output.
	ssh -l <USERNAME> -p <PORT> localhost help who-am-i - It is helpful for listing the current user’s credentials and permissions available to the user. This can be useful when debugging the absence of CLI commands due to the lack of certain permissions
	Using the CLI client -
		The CLI client can be downloaded directly from a Jenkins master at JENKINS_URL/jnlpJars/jenkins-cli.jar
		Syntax - java -jar jenkins-cli.jar [-s JENKINS_URL] -ssh -user <USERNAME> <command>
		
UNIT TESTING
	Provides a host of plugins for unit testing of other technologies such as MS Test for .net unit testing.
	Java UT -
		Step 1: Open the dashboard, choose an existing project and click configure.
		Step 2: Browse towards add a build step and invoke Ant.
		Step 3: Click on advanced.
		Step 4: Enter the location of build.xml in the build file section.
		Step 5: Click the Add post-build option and click on Publish Junit test result report.
		Step 6: Ensure the report is in the folder of the project workspace. The “*.xml” basically tells Jenkins to pick up the result xml files which are produced by running of the Junit test cases. Click Save after done.
		Step 7: Click on build and check logs to see if it is successful or not.
			
AUTOMATED TESTING
	Selenium - 
		Step 1: go to plugins and choose selenium plugins and click to install.
		Step 2: go to configure system and select on selenium jar and save
		Step 3: Go to dashboard and select the config option for the project at hand
		Step 4: Click on add build step and choose Selenium HQ html Suite Run
		Step 5: Add the required details and click on save, execute and build. The test is executed, and a report is built.
		
NOTIFICATIONS
	Jenkins comes with a feature to add email notifications to the build project
	Go-to Manage Jenkins → Configure System. In the email notification space enter the require STMP server and use email suffixes.
	Configure the recipients so that they would receive notification about broken or unstable builds
	Notification plugins such as Tikal Knowledge allows job status notification for JSON and XML formats.
	
CODE ANALYSIS
	They provide utilities for static code analysis. Some tools are CheckStyle, FindBugs, PMD etc.
	Provides details like - Total warning in a job, Showing of new and fixed warning of a build, Trend reports showing warnings per build, Detailed reports of found warnings.
	
AUTOMATED DEPLOYMENT
	There are plugins available to transfer build files to the server. E.g., deploy to container plugin. Head to the manage plugins and install the respective plugins.
	It takes the war ear file and deploys that to the running remote application build.
	Go-to build and configure and click on ‘deploy to war/ear to container’.
	In the war container section save details about the destination server and click save.
	
CONFIGURATION - Jenkins Dashboard -> Manage Jenkins -> Configure System
	Jenkins Home Directory - Jenkins needs some disk space to perform builds and keep archives. By default, this is set to ~/.jenkins. To change the location, first create a new folder and copy all the contents from the existing ~/.jenkins to this new directory, and then set the JENKINS_HOME environment variable
	# of executors - This refers to the total number of concurrent job executions that can take place on the Jenkins machine. Sometimes the recommendation is to keep this number the same as the number of CPU on the machines for better performance
	Environment Variables - This is used to add custom environment variables which will apply to all the jobs. These are key-value pairs and can be accessed and used in Builds wherever required.
	Jenkins URL - By default, the Jenkins URL points to localhost. Can be accessed using the environment variable JENKINS_URL 
	Email Notification -  used to configure the SMTP settings for sending out emails.
	
MANAGEMENT - Jenkins Dashboard -> Manage Jenkins
	Configure System - This is where one can manage paths to the various tools to use in builds, such as the JDKs, the versions of Ant and Maven, as well as security options, email servers, and other system-wide configuration details. When plugins are installed. Jenkins will add the required configuration fields dynamically after the plugins are installed.
	Reload Configuration from Disk - Jenkins stores all its system and build job configuration details as XML files which is stored in the Jenkins home directory. Here also all of the build history is stored. If you are migrating build jobs from one Jenkins instance to another, or archiving old build jobs, you will need to add or remove the corresponding build job directories to Jenkins’s builds directory.
	Manage Plugin - Here one can install a wide variety of third-party plugins right from different Source code management tools such as Git, Mercurial or ClearCase, to code quality and code coverage metrics reporting. Plugins can be installed, updated and removed through the Manage Plugins screen
	System Information - This screen displays a list of all the current Java system properties and system environment variables
	System Log - The System Log screen is a convenient way to view the Jenkins log files in real time. Again, the main use of this screen is for troubleshooting.
	Load Statistics - This pages displays graphical data on how busy the Jenkins instance is in terms of the number of concurrent builds and the length of the build queue 
	Script Console - This screen lets you run Groovy scripts on the server. It is useful for advanced troubleshooting since it requires a strong knowledge of the internal Jenkins architecture.
	Manage nodes - Jenkins is capable of handling parallel and distributed builds. A node is another machine that Jenkins can use to execute its builds.
	Prepare for Shutdown - If there is a need to shut down Jenkins, or the server Jenkins is running on, it is best not to do so when a build is being executed. To shut down Jenkins cleanly, you can use the Prepare for Shutdown link, which prevents any new builds from being started. Eventually, when all of the current builds have finished, one will be able to shut down Jenkins cleanly.
	
UNIT TESTING
	Jenkins provides an out of box functionality for Junit, and provides a host of plugins for unit testing for other technologies, an example being MSTest for .Net Unit tests.
	Example of a Junit Test -
		Go to the Jenkins dashboard and Click on the existing HelloWorld project and choose the Configure option
		Browse to the section to Add a Build step and choose the option to Invoke Ant. Click on the Advanced button and in the build file section, enter the location of the build.xml file
		Next click the option to Add post-build option and choose the option of “Publish Junit test result report” and provide the path for the test report XMLs(eg- Reports/*.xml)
		Once saved, you can click on the Build Now option. Once the build is completed, a status of the build will show if the build was successful or not. In the Build output information, you will now notice an additional section called Test Result
		
AUTOMATED TESTING
	Example of Selenium -
		Go to Manage Plugin. Find the Hudson Selenium Plugin and choose to install. Restart the Jenkins instance.
		Go to Configure System. Configure the selenium server jar and click on the Save button
		Go back to your dashboard and click on the Configure option for the HelloWorld project.
		Click on Add build step and choose the option of “SeleniumHQ htmlSuite Run”

NOTIFICATION	
	Steps
		Goto Manage Jenkins → Configure System. Go to the E-mail notification section and enter the required SMTP server and user email-suffix details.
		Under post-build section, configure the recipients
	Apart from the default, there are also notification plugin’s available in the market. An example is the notification plugin from Tikal Knowledge which allows sending Job Status notifications in JSON and XML formats
	
REPORTING
	There are many reporting plugins available with the simplest one being the reports available for jUnit tests.
	In the Post-build action for any job, you can define the reports to be created. After the builds are complete, the Test Results option will be available for further drill-down.
	
CODE ANALYSIS
	Jenkins has a host of Code Analysis plugin. This plugin provides utilities for the static code analysis plugins. Jenkins can parse the results file from various Code Analysis tools such as CheckStyle, FindBugs, PMD etc. For each corresponding code analysis tool, a plugin in Jenkins needs to be installed.
	Additionally the add-on plugin Static Analysis Collector is available that combines the individual results of these plugins into a single trend graph and view.
	
DISTRIBUTED BUILDS
	One can configure other Jenkins machines to be slave machines to take the load off the master Jenkins server.
	Sometimes you might also need several different environments to test your builds. In this case using a slave to represent each of your required environments is almost a must.
	Since each slave runs a separate program called a "slave agent" there is no need to install the full Jenkins (package or compiled binaries) on a slave. There are various ways to start slave agents, but in the end the slave agent and Jenkins master needs to establish a bi-directional communication link (for example a TCP/IP socket.) in order to operate.
	To set up slaves/nodes in Jenkins -
		1. Manage Jenkins -> Manage Nodes
		2. Click on New Node. Give a name for the node, choose the Dumb slave option and click OK
		3. Enter the details(such as No. of executor, remote root directory, label, launch method. etc) of the node slave machine. Once saved, the new node machine will initially be in an offline state, but will come online if all the settings provided were correct. One can at any time make the node slave machine as offline if required.
		
AUTOMATED DEPLOYMENT
	There are many plugins available which can be used to transfer the build files, after a successful build, to the respective application/web server. 
	On example is the “Deploy to container Plugin”. To use this follow the steps given below -
		1. Manage Jenkins → Manage Plugins. Search 'Deploy to container Plugin' and install the plugin. Restart the Jenkins server. This plugin takes a war/ear file and deploys that to a running remote application server(Tomcat)
		2. Go to your Build project and click the Configure option. Choose the option “Deploy war/ear to a container” under 'Post Build Action'.
		3. In the Deploy war/ear to a container section, enter the required details of the server on which the files need to be deployed and click on the Save button. These steps will now ensure that the necessary files get deployed to the necessary container after a successful build.
		
METRICS AND TRENDS
	There are various plugins which are available in Jenkins to showcase metrics for builds which are carried out over a period of time. 
	These metrics are useful to understand your builds and how frequently they fail/pass over time. ex- ‘Build History Metrics plugin’, 'Hudson global-build-stats plugin'
	
SECURITY
	In Jenkins you have the ability to setup users and their relevant permissions on the Jenkins instance. By default you will not want everyone to be able to define jobs or other administrative tasks in Jenkins. So Jenkins has the ability to have a security configuration in place
	To configure Security in Jenkins, follow the steps -
		1. Manage Jenkins -> Configure Global Security
		2. Click on Enable Security option. As an example, let’s assume that we want Jenkins to maintain it’s own database of users, so in the Security Realm, choose the option of ‘Jenkins’ own user database’.
		3. Now you can add admin users
		4. It’s now time to setup your users in the system. Go to Manage Jenkins -> Manage Users
		5. Just like you defined your admin user, start creating other users for the system
		6. Now it’s time to setup your authorizations, basically who has access to what. Go to Manage Jenkins -> Configure Global Security -> Authorization -> Matrix based security
		7. If you don’t see the user in the user group list, enter the user name and add it to the list. Then give the appropriate permissions to the user
	For Windows AD authentication, one has to add the Active Directory plugin to Jenkins.
	
BACKUP PLUGIN
	Steps
		1. Add ‘Backup Plugin’. Once done, restart the Jenkins instance
		2. Now when you go to Manage Jenkins, and scroll down you will see ‘Backup Manager’ as an option. Click on this option.
		3. Click on Setup
		4. Here, the main field to define is the directory for your backup. Ensure it’s on another drive which is different from the drive where your Jenkins instance is setup. Click on the Save button.
		5. Click on the ‘Backup Hudson configuration’ from the Backup manager screen to initiate the backup.
	To recover from a backup, go to the Backup Manager screen, click on Restore Hudson configuration. The list of backup’s will be shown, click on the appropriate one to click on Launch Restore to begin the restoration of the backup.
	
REMOTE TESTING
	Web tests such as selenium tests can be run on remote slave machines via the master slave and selenium suite plugin installation. The following steps show how to run remote tests using this configuration -
	1. Ensure for the slave node, the launch method is put as ‘Launch slave agents via Java Web Start’
	2. Open slave Jenkins instance(<slave_url>:<slave_port>) on the slave node. 
	3. On slave jenkins instance go to Manage Jenkins -> Manage Nodes -> <slave node>. Scroll down and you will see the Launch option which is the option to Start ‘Java Web Start’. You will now see a Jenkins Slave window opened and now connected.
	4. Run the job on the Master node.
	
https://jenkins.io/doc/tutorials - do handson on google cloud
